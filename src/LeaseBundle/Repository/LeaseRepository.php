<?php

namespace LeaseBundle\Repository;

use Doctrine\ORM\EntityRepository;
use LeaseBundle\Entity\Application;
use LeaseBundle\Entity\Lease;
use LeaseBundle\Entity\WaterBodyDetails;
use LeaseBundle\Entity\MarketDetail;
use LeaseBundle\Form\ApplicationDetailsType;

/**
 * LeaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LeaseRepository extends EntityRepository
{
    public function getOpenWaterBodyLeaseList() {
        $qb = $this->createQueryBuilder('l');
        return $qb
            ->where('l.type = :type')
            ->andWhere($qb->expr()->isNull('l.application'))
            ->andWhere($qb->expr()->in('l.status', array('TERMINATED','ACTIVE')))
            ->setParameter('type', 'WaterBody')
            ->orderBy('l.id','DESC')
        ;
    } 
    public function getWaterBodyLeaseListForApply() {
        $qb = $this->createQueryBuilder('l');
        return $qb
            ->where('l.type = :type')
            ->andWhere($qb->expr()->in('l.status', array('CLOSED','SUSPEND','ACTIVE')))
            ->setParameter('type', 'WaterBody')
            ->orderBy('l.id','DESC')
        ;
    }
    public function getGadgetLeaseListForApply() {
        $qb = $this->createQueryBuilder('l');
        return $qb
            ->join('l.gadget', 'g')
            ->where('l.type = :type')
            ->andWhere($qb->expr()->in('l.status', array('CLOSED','SUSPEND','ACTIVE')))
            ->andWhere($qb->expr()->in('g.status', array('APPROVED')))
            ->setParameter('type', 'Gadget')
            ->orderBy('l.id','DESC')
            ;
    }
    public function getMarketLeaseListForApply() {
        $qb = $this->createQueryBuilder('l');
        return $qb
            ->select('l')
            ->join('l.marketDetail', 'md')
            ->join('md.market', 'm')
            ->where('l.type = :type')
            ->andWhere($qb->expr()->in('l.status', array('CLOSED','SUSPEND','ACTIVE')))
            ->setParameter('type', 'Market')
            ->orderBy('m.marketName','DESC')
        ;
    } 
    public function getOpenMarketLeaseList() {
        $qb = $this->createQueryBuilder('l');
        return $qb
            ->join('l.marketDetail', 'md')
            ->join('md.market', 'm')
            ->where('l.type = :type')
            ->andWhere($qb->expr()->isNull('l.application'))
            ->andWhere($qb->expr()->in('l.status', array('TERMINATED','ACTIVE')))
            ->setParameter('type', 'Market')
            ->orderBy('m.marketName','DESC')
        ;
    }
    public function getApprovedLeaseList($type){

        $qb = $this->createQueryBuilder('l');

        if($type=='Market'){
            $qb->join('l.marketDetail', 'md');
            $qb->join('md.market', 'm');
        }
        $qb->where('l.type = :type');
        $qb->andWhere($qb->expr()->in('l.status', array('CLOSED','SUSPEND')));
        $qb->setParameter('type', $type);
        if($type=='Market') {
            $qb ->orderBy('m.marketName','DESC');
        }
        else{
            $qb->orderBy('l.id','DESC');
        }

        return $qb;

    }
    public function getWaitingforApprovalLeaseList(){

        $qb = $this->createQueryBuilder('l');
        return $qb
            ->where('l.type != :type')
            ->andWhere($qb->expr()->in('l.status', array('WAITING_FOR_RENEW_APPROVAL')))
            ->setParameter('type', 'WaterBody')
            ;
    }
    public function getWaitingforTerminateLeaseList($type){


        $qb = $this->createQueryBuilder('l');

        if($type=='Market'){
            $qb->join('l.marketDetail', 'md');
            $qb->join('md.market', 'm');
        }
        $qb->where('l.type = :type');
        $qb->andWhere($qb->expr()->in('l.status', array('WAITING_FOR_TERMINATE')));
        $qb->setParameter('type', $type);
        if($type=='Market') {
            $qb ->orderBy('m.marketName','DESC');
        }
        else{
            $qb->orderBy('l.id','DESC');
        }

        return $qb;
        
    }
    public function create(Lease $data)
    {
        $total =0;
        /** @var WaterBodyDetails $detail */
        foreach ($data->getWaterBodyDetails() as $detail) {
            $detail->setLease($data);
            $total+=$detail->getProposedAmount();
            $detail->getLease()->setShotangso($total);
        }
        /** @var ApplicationDetailsType $detail */
        foreach ($data->getApplications() as $application) {
            $application->setLease($data);
        }
        $this->_em->persist($data);
        $this->_em->flush();
    }
    public function createMarket(Lease $data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }
    public function createPreviousMarket(Lease $data)
    {
        foreach ($data->getApplications() as $application) {
            $application->setLease($data);
        }
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function createPrevious(Lease $data)
    {

        $total =0;
        /** @var WaterBodyDetails $detail */
        foreach ($data->getWaterBodyDetails() as $detail) {
            $detail->setLease($data);
            $total+=$detail->getProposedAmount();
            $detail->getLease()->setShotangso($total);
        }

        foreach ($data->getApplications() as $application) {
            $application->setLease($data);
        }

        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function createLease($data)
    {
        $this->save($data);
    }
    
    public function save($data) {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function allWaitingLeases(){

        $qb = $this->getEntityManager()->getRepository('LeaseBundle:Lease')->createQueryBuilder('l');
        $qb->join('l.applications', 'a');
        $qb->join('a.registerSix', 'r');

        $qb->select('l');
        $qb->where("l.status = 'ACTIVE'");
        $qb->orWhere("l.status = 'CORRECTION'");
        $qb->andWhere("a.status = 'APPROVED'");
        $qb->andWhere("r.status = 'APPROVED'");
        $qb->orderBy('l.id','DESC');
        return $qb;
    }

}
