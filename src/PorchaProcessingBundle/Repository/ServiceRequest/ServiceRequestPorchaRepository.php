<?php

namespace PorchaProcessingBundle\Repository\ServiceRequest;

use AppBundle\Service\OfficeManager;
use AppBundle\Traits\QueryAssistant;
use Doctrine\Common\Util\Debug;
use Doctrine\DBAL\Types\Type;
use Doctrine\ORM\EntityRepository;
use PorchaProcessingBundle\Entity\Khatian;
use PorchaProcessingBundle\Entity\KhatianLog;
use PorchaProcessingBundle\Entity\ServiceRequest;
use PorchaProcessingBundle\Entity\ServiceRequestAdditionalFee;
use PorchaProcessingBundle\Entity\ServiceRequestPorcha;
use Symfony\Component\HttpFoundation\Session\SessionInterface;

/**
 * ServiceRequestPorchaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRequestPorchaRepository extends BaseRepository
{
    use QueryAssistant;

    /** @var OfficeManager */
    protected $officeManager;

    public function insert(ServiceRequest $serviceRequest, $officeSetting = array(), $type)
    {
        $serviceRequest->setCreatedAt(new \DateTime());
        $serviceRequest->setStatus('PENDING');
        $this->save($serviceRequest, $officeSetting, $type);
    }

    public function save(ServiceRequest $serviceRequest, $officeSetting = array(), $serviceType)
    {
        $serviceType =  strtoupper($serviceType);
        $serviceRequest->setType($serviceType);
        $this->setFees($serviceRequest, $officeSetting);

        $this->_em->persist($serviceRequest);
        $this->_em->flush();

        /** @var ServiceRequestPorcha $porcha */
        foreach ($serviceRequest->getDetailEntities() as $porcha) {
            $porcha->setServiceRequest($serviceRequest);

            if ($serviceType == 'PORCHA_REQUEST') {
                $porcha->setKhatianLog(null);
                $khatianLog = $this->getAppliedKhatianLogId($porcha);
                if ($khatianLog) {
                    $porcha->setKhatianLog($khatianLog);
                    $this->_em->persist($khatianLog);
                }
            }

            $this->_em->persist($porcha);
        }

        if (!isset($serviceRequest->disableFields) ||!$serviceRequest->disableFields['paymentInfo']) {
            $this->setDeliveryDate($serviceRequest, $officeSetting);
        }

        foreach ($serviceRequest->getRemoveEntities() as $entity) {
            $this->_em->remove($entity);
        }

        $this->_em->flush();
    }

    public function setFees(ServiceRequest $serviceRequest, $officeSettings)
    {
        $courtFee = 0;

        // Delivery Fee
        if ($serviceRequest->getDeliveryMethod() == 'POSTAL') {
            if ($serviceRequest->getDistrict() && $serviceRequest->getDistrict()->getId() == $serviceRequest->getOffice()->getDistrict()->getId()) {
                $serviceRequest->setDeliveryFee((int)$officeSettings['deliveryFee']['deliveryFee']);
            } else {
                $serviceRequest->setDeliveryFee((int)$officeSettings['deliveryFee']['otherDistrictDeliveryFee']);
            }
        }

        // Service Fee
        /** @var ServiceRequestPorcha $entity */
        if ($serviceRequest->getDetailEntities()) {
            foreach ($serviceRequest->getDetailEntities() as $entity) {
                if ($officeSettings['courtFee'] && $surveyFee = $officeSettings['courtFee'][$entity->getSurvey()->getId()]) {
                    $courtFee += $serviceRequest->getUrgency()  == 'URGENT' ? (int)$surveyFee['urgentCourtFee'] : (int)$surveyFee['normalCourtFee'];
                }
            }
        }
        $serviceRequest->setCourtFee($courtFee);

        // UDC Delivery Fee
        if ($serviceRequest->getRequestFrom() == 'UDC') {
            $serviceRequest->setUdcFee((int)$officeSettings['deliveryFee']['udcDeliveryFee']);
        }
        
        $additionalFee = $this->persistAdditionalFees($serviceRequest, $officeSettings['additionalFee']);
        // Total
        $serviceRequest->setTotalFee(
            $serviceRequest->getCourtFee() + $serviceRequest->getDeliveryFee() + $additionalFee + $serviceRequest->getUdcFee()
        );
    }

    private function getAppliedKhatianLogId($porcha)
    {

        $office = $porcha->getServiceRequest()->getOffice();
        $officeType = $porcha->getServiceRequest()->getOffice()->getType();
        if (strtoupper($officeType) == 'UDC') {
            $office = $office->getParent();
        }

        $qb = $this->_em->getRepository('PorchaProcessingBundle:Khatian')->createQueryBuilder('k');
        $qb->join('k.volume', 'v');
        $qb->where('k.office = :office');
        $qb->setParameter('office', $office);

        $qb->andWhere('k.mouza = :mouza');
        $qb->setParameter('mouza', $porcha->getMouza());

        $qb->andWhere('v.survey = :survey');
        $qb->setParameter('survey', $porcha->getSurvey());

        $qb->andWhere('v.district = :district');
        $qb->setParameter('district', $porcha->getDistrict());

        $qb->andWhere('v.upozila = :upozila');
        $qb->setParameter('upozila', $porcha->getUpozila());

        $qb->andWhere('k.khatianNo = :khatianNo');
        $qb->setParameter('khatianNo', $porcha->getKhatianNo());
        $rows = $qb->getQuery()->getResult();

        if ($rows) {
            /** @var Khatian $khatian */

            $khatian = $rows[0];

            $qb = $this->_em->getRepository('PorchaProcessingBundle:KhatianLog')->createQueryBuilder('kl');
            $qb->where('kl.khatianVersion = :khatianVersion')->setParameter('khatianVersion', $khatian->getLastVersion());
            $qb->andWhere("kl.khatianStatus != 'NONE'");
            $qb->select('COUNT(kl.id)');
            $qb->setMaxResults(1);
            if ($qb->getQuery()->getSingleScalarResult()) {

                $khatianLog = new KhatianLog();

                $khatianVersion = $this->_em->getRepository('PorchaProcessingBundle:KhatianVersion')->findOneBy(array('khatian' => $khatian), array('id' => 'desc'));
                $khatianLog->setKhatianVersion($khatianVersion);
                $khatianLog->setKhatianStatus('HAS_ENTRY');

                return $khatianLog;
            }
            return null;
        }

        return null;
    }

    public function setDeliveryDate(ServiceRequest $serviceRequest, $officeSettings)
    {
        $nextWorkingDayAfter = 0;

        $urgency = strtolower($serviceRequest->getUrgency());

        $deliveryDay = $officeSettings['deliveryDay'];

        $additionalDeliveryDayForUdc = $officeSettings['deliveryFee']['udcDeliveryDay'];

        /** @var ServiceRequestPorcha $entity */
        foreach ($serviceRequest->getDetailEntities() as $entity) {

            $surveyId = $entity->getSurvey()->getId();

            // If Setting not set
            if (!isset($deliveryDay[$surveyId])) {
                continue;
            }

            if ($serviceRequest->getType() == 'MOUZA_MAP') {
                $nextWorkingDayAfter = $deliveryDay[$surveyId][$urgency . 'DeliveryHasEntry'];
            } else {
                $khatian = null;
                $khatianLog = $entity->getKhatianLog();
                if ($khatianLog) {
                    $khatianVersion = $khatianLog->getKhatianVersion();
                    $khatian = $khatianVersion->getKhatian();
                }

                // If Khatian not found, that mean New Entry
                if (!$khatian && $deliveryDay[$surveyId][$urgency . 'DeliveryNotEntry'] > $nextWorkingDayAfter) {
                    $nextWorkingDayAfter = $deliveryDay[$surveyId][$urgency . 'DeliveryNotEntry'];


                    // If Khatian Found But Khatian is Non Deliverable
                } else {
                    if ($khatian && $khatianVersion->getNonDeliverableMessage(
                        ) && $deliveryDay[$surveyId][$urgency . 'DeliveryNonDeliverable'] > $nextWorkingDayAfter
                    ) {
                        $nextWorkingDayAfter = $deliveryDay[$surveyId][$urgency . 'DeliveryNonDeliverable'];

                        // last option is: If Khatian Found
                    } else {
                        if ($khatian && $deliveryDay[$surveyId][$urgency . 'DeliveryHasEntry'] > $nextWorkingDayAfter) {
                            $nextWorkingDayAfter = $deliveryDay[$surveyId][$urgency . 'DeliveryHasEntry'];

                        }
                    }
                }
            }
        }

        if (strtoupper($serviceRequest->getOffice()->getType()) == 'UDC') {
            $nextWorkingDayAfter = $nextWorkingDayAfter + $additionalDeliveryDayForUdc;
        }

        $date = $this->officeManager->applicationDeliveryDate(
            $serviceRequest->getCreatedAt()->format('Y-m-d'),
            $nextWorkingDayAfter
        );

        return $serviceRequest->setEstimateDeliveryAt(new \DateTime($date));
    }

    public function insertMouzaMap(ServiceRequest $serviceRequest, $fee = array())
    {
        $serviceRequest->setCreatedAt(new \DateTime());
        $serviceRequest->setStatus('PENDING');
        $this->save($serviceRequest, $fee, 'MOUZA_MAP');
    }

    public function update(ServiceRequest $serviceRequest, $fee = array(), $serviceType)
    {
        if (strtoupper($serviceRequest->getStatus()) == 'PENDING') {
            $this->save($serviceRequest, $fee, $serviceType);
        }
    }

    public function updateMouzaMap(ServiceRequest $serviceRequest, $fee = array())
    {
        $this->save($serviceRequest, $fee, 'MOUZA_MAP');
    }

    public function getPorchaRequestList($data, $serviceType, $delivered = false)
    {
        $params = $this->queryParameters($data);

        $qb = $this->createQueryBuilder('p');
        $qb->join('p.serviceRequest', 'sr');
        $qb->leftJoin('p.khatianLog', 'kl');
        $qb->leftJoin('kl.khatianVersion', 'kv');
        $qb->leftJoin('sr.office', 'o');
        $qb->leftJoin('p.survey', 's');
        $qb->leftJoin('p.upozila', 'u');
        $qb->leftJoin('p.mouza', 'm');

        if ($delivered) {
            $qb->where("sr.status = 'DELIVERED' ");
        }

        $qb->andWhere('sr.type = :serviceType')->setParameter('serviceType', $serviceType);
        $qb->orderBy('sr.createdAt', 'DESC');
        if (!empty($params['orderField'])) {
            $qb->orderBy($params['orderField'], $params['order']);
        }

        if (!empty($params['arrFilterField']['sr.createdAt'])) {
            $timestamp = strtotime($params['arrFilterField']['sr.createdAt']);
            //$qb->andWhere('sr.createdAt > :startDate')->setParameter('startDate', $date.' 00:00:00');
            //$qb->andWhere('sr.createdAt <= :endDate')->setParameter('endDate', $date.' 23:59:59');

            $qb->andWhere('DAY(sr.createdAt) = :dd')->setParameter('dd', date('d', $timestamp));
            $qb->andWhere('MONTH(sr.createdAt) = :mm')->setParameter('mm', date('m', $timestamp));
            $qb->andWhere('YEAR(sr.createdAt) = :yy')->setParameter('yy', date('Y', $timestamp));
            unset($params['arrFilterField']['sr.createdAt']);
        }
        $qb = $this->filterQuery($qb, $params['arrFilterField']);

        return $qb->getQuery();
    }
    public function getPorchaCorrectionRequestList($data, $serviceType, $delivered = false, $offices)
    {

        $params = $this->queryParameters($data);

        $qb = $this->createQueryBuilder('p');
        $qb->join('p.serviceRequest', 'sr');
        $qb->join('sr.office', 'o');

        /*if ($delivered) {
            $qb->where("sr.status = 'DELIVERED' ");
        }*/

        $qb->andWhere('sr.type = :serviceType')->setParameter('serviceType', $serviceType);
         $qb->andWhere('sr.office IN(:offices)')->setParameter('offices', $offices);
        $qb->orderBy('sr.createdAt', 'DESC');

        if (!empty($params['orderField'])) {
            $qb->orderBy($params['orderField'], $params['order']);
        }

        if (!empty($params['arrFilterField']['sr.createdAt'])) {
            $timestamp = strtotime($params['arrFilterField']['sr.createdAt']);

            $qb->andWhere('DAY(sr.createdAt) = :dd')->setParameter('dd', date('d', $timestamp));
            $qb->andWhere('MONTH(sr.createdAt) = :mm')->setParameter('mm', date('m', $timestamp));
            $qb->andWhere('YEAR(sr.createdAt) = :yy')->setParameter('yy', date('Y', $timestamp));
            unset($params['arrFilterField']['sr.createdAt']);
        }
         $qb = $this->filterQuery($qb, $params['arrFilterField']);

        return $qb->getQuery();
    }

    public function getPorchaRequestReportList($data)
    {

        $qb = $this->createQueryBuilder('p');
        $qb->join('p.serviceRequest', 'sr');
        $qb->leftJoin('p.khatianLog', 'kl');
        $qb->leftJoin('kl.khatianVersion', 'kv');
        $qb->leftJoin('sr.office', 'o');
        $qb->leftJoin('p.survey', 's');
        $qb->leftJoin('p.upozila', 'u');
        $qb->leftJoin('p.mouza', 'm');
        // $qb->where("sr.status != 'DELIVERED' ");
        $qb->andWhere('sr.type = :serviceType')->setParameter('serviceType', $data['application_type']);
        $qb->andWhere('sr.createdAt >= :start');
        $qb->andWhere('sr.createdAt <= :end');
        $qb->setParameter('start', $data['start_date'] . ' 00:00:00');
        $qb->setParameter('end', $data['end_date'] . ' 23:59:59');
        $qb->orderBy('sr.createdAt', 'DESC');

        return $qb->getQuery();
    }


    /**
     * @param OfficeManager $officeManager
     * @return $this
     */
    public function setOfficeManager(OfficeManager $officeManager)
    {
        $this->officeManager = $officeManager;

        return $this;
    }

    public function porchaRequestDashboardStatistics($date, $office)
    {
        /** TODO: Optimize Query */

        $before1Day = (new \DateTime($date . ' -1 Days'))->format('Y-m-d');
        $before7Days = (new \DateTime($date . '-7 Days'))->format('Y-m-d');
        $before8Days = (new \DateTime($date . '-8 Days'))->format('Y-m-d');
        $before15Days = (new \DateTime($date . '-15 Days'))->format('Y-m-d');
        $before16Days = (new \DateTime($date . '-16 Days'))->format('Y-m-d');

        $data = array(
            'ENTRY'   => array(
                'in7Days'    => $this->getServiceRequestPorchaCount('entry', $office, $before7Days, $before1Day),
                'in14Days'   => $this->getServiceRequestPorchaCount('entry', $office, $before15Days, $before8Days),
                'over2Weeks' => $this->getServiceRequestPorchaCount('entry', $office, null, $before16Days),
            ),
            'VERIFY'  => array(
                'in7Days'    => $this->getServiceRequestPorchaCount('verify', $office, $before7Days, $before1Day),
                'in14Days'   => $this->getServiceRequestPorchaCount('verify', $office, $before15Days, $before8Days),
                'over2Weeks' => $this->getServiceRequestPorchaCount('verify', $office, null, $before16Days),
            ),
            'COMPARE' => array(
                'in7Days'    => $this->getServiceRequestPorchaCount('compare', $office, $before7Days, $before1Day),
                'in14Days'   => $this->getServiceRequestPorchaCount('compare', $office, $before15Days, $before8Days),
                'over2Weeks' => $this->getServiceRequestPorchaCount('compare', $office, null, $before16Days),
            ),
            'APPROVE' => array(
                'in7Days'    => $this->getServiceRequestPorchaCount('approve', $office, $before7Days, $before1Day),
                'in14Days'   => $this->getServiceRequestPorchaCount('approve', $office, $before15Days, $before8Days),
                'over2Weeks' => $this->getServiceRequestPorchaCount('approve', $office, null, $before16Days),
            ),

        );

        $data['ENTRY']['total'] = array_sum($data['ENTRY']);
        $data['VERIFY']['total'] = array_sum($data['VERIFY']);
        $data['COMPARE']['total'] = array_sum($data['COMPARE']);
        $data['APPROVE']['total'] = array_sum($data['APPROVE']);

        return $data;
    }

    public function getServiceRequestPorchaCount($type, $officeId = null, $startDate = null, $endDate = null)
    {
        switch ($type) {
            case 'verify': $field = 'verifiedAt'; $status = array('READY_FOR_VERIFICATION'); break;
            case 'compare': $field = 'comparedAt'; $status = array('READY_FOR_COMPARISON'); break;
            case 'approve': $field = 'approvedAt'; $status = array('READY_FOR_APPROVAL'); break;
            default: $field = 'entryAt';  $status = array('NONE'); break;
        }

        $qb = $this->_em->createQueryBuilder();
        $qb->select('COUNT(srp.id)');
        $qb->from('PorchaProcessingBundle:ServiceRequestPorcha', 'srp');
        $qb->join('srp.serviceRequest', 'sr');
        $qb->leftJoin('srp.khatianLog', 'kl');

        $qb->andWhere($qb->expr()->notIn('sr.status', array('DELIVERED')));

        if ($startDate) {
            $qb->andWhere($qb->expr()->gt("sr.createdAt", ':startDate'));
            $qb->setParameter('startDate', new \DateTime($startDate . ' 00:00:00'), Type::DATETIME);
            //$qb->andWhere("sr.createdAt >= TO_DATE(:startDate, 'YYYY-MM-DD HH24:MI:SS')")->setParameter('startDate', $startDate . ' 00:00:00');
        }

        if ($endDate) {
            $qb->andWhere($qb->expr()->lt("sr.createdAt", ':endDate'));
            $qb->setParameter('endDate', new \DateTime($endDate . ' 23:59:59'), Type::DATETIME);
            //$qb->andWhere("sr.createdAt <= TO_DATE(:endDate, 'YYYY-MM-DD HH24:MI:SS')")->setParameter('endDate', $endDate . '23:59:59');
        }

        if ($officeId) {
            $qb->andWhere("sr.office = :office")->setParameter('office', $officeId);
        }

        if ($type == 'entry') {
            $qb->andWhere("kl.khatianStatus != 'NONE' ");
            $qb->andWhere($qb->expr()->orX(
                $qb->expr()->isNull("srp.khatianLog"),
                $qb->expr()->in("kl.khatianStatus", $status)
            ));
        } else {
            $qb->andWhere($qb->expr()->andX(
                $qb->expr()->isNotNull("srp.khatianLog"),
                $qb->expr()->in("kl.khatianStatus", $status)
            ));
        }

        $q = $qb->getQuery();

        return $q->getSingleScalarResult();
    }
    public function getServiceRequestCountByPhoneAtDate($data, $serviceType)
    {
    if(strtoupper($serviceType)=='CASE_COPY'){
        $contactUnmber = $data['porchaprocessingbundle_servicerequestcasecopy']['serviceRequest']['contactNumber'];
    }else{
        $contactUnmber = $data['porchaprocessingbundle_servicerequest']['contactNumber'];
    }
        $qb = $this->_em->createQueryBuilder();
        $qb->select('COUNT(sr.id)');
        $qb->from('PorchaProcessingBundle:ServiceRequest', 'sr');
        $qb->Where('sr.type = :serviceType');
        $qb->setParameter('serviceType', $serviceType);
        $qb->andWhere('sr.contactNumber = :contactNumber');
        $qb->setParameter('contactNumber', $contactUnmber);
        $qb->andWhere($qb->expr()->gt("sr.createdAt", ':start'));
        $qb->setParameter('start', new \DateTime(date('Y-m-d'). ' 00:00:00'), Type::DATETIME);
        $qb->andWhere($qb->expr()->lt("sr.createdAt", ':end'));
        $qb->setParameter('end', new \DateTime(date('Y-m-d'). ' 23:59:59'), Type::DATETIME);

        $q = $qb->getQuery();

        return $q->getSingleScalarResult();
    }

    public function createService($data)
    {
        $service = $this->setServiceRequest($data);
        $officeSetting = $this->_em->getRepository('PorchaProcessingBundle:ServiceRequest')->getServiceFee($service->getOffice(), $service, $service->getType());
        $this->setServiceRequestForPorcha($data, $service, $officeSetting);
        return $service;
    }

    protected function setServiceRequest($data)
    {
        $district = $this->getEntityManager()->getRepository('AppBundle:District')->find($data['citizenDistrict']);
        $upozila  = $this->getEntityManager()->getRepository('AppBundle:Upozila')->find($data['citizenUpozila']);
        $office   = $this->getEntityManager()->getRepository('AppBundle:Office')->findOneByDistrict($data['district']);

        $service = new ServiceRequest();
        $service->setName($data['name']);
        $service->setNid($data['nid']);
        $service->setEmail($data['email']);
        $service->setContactNumber($data['mobile']);
        $service->setOffice($office);
        $service->setStatus('PENDING');
        $service->setCreatedAt(new \DateTime());
        $service->setType('PORCHA_REQUEST');
        $service->setUrgency($data['deliveryUrgency']);
        $service->setDeliveryMethod($data['deliveryWay']);
        $service->setRequestFrom('WEB');
        $service->setDistrict($district);
        $service->setUpozila($upozila);
        $service->setPostalCode($data['postalCode']);
        $service->setRoadNo($data['roadNo']);
        $service->setHouseNo($data['houseNo']);
        $service->setArea($data['area']);
        $service->setCourtFee($data['court-fee']);
        $service->setDeliveryFee($data['delivery-fee']);
        $service->setTotalFee($data['court-fee'] + $data['delivery-fee']);


        $this->savePorcha($service);
        return $service;
    }

    public function savePorcha($servicePorcha)
    {
        $this->_em->persist($servicePorcha);
        $this->_em->flush();
    }

    /**
     * @param $data
     */
    protected function setServiceRequestForPorcha($data, ServiceRequest $service, $officeSetting)
    {
        $survey = $this->getEntityManager()->getRepository('PorchaProcessingBundle:Survey')->find($data['survey']);
        $district = $this->getEntityManager()->getRepository('PorchaProcessingBundle:District')->find($data['district']);

        $upozila = $this->getEntityManager()->getRepository('PorchaProcessingBundle:Upozila')->find($data['upozila']);
        $mouza = $this->getEntityManager()->getRepository('PorchaProcessingBundle:Mouza')->find($data['mouza']);

        $servicePorcha = new ServiceRequestPorcha();
        $servicePorcha->setSurvey($survey);
        $servicePorcha->setDistrict($district);
        $servicePorcha->setUpozila($upozila);
        $servicePorcha->setMouza($mouza);
        $servicePorcha->setKhatianNo($data['khatianNo']);
        $servicePorcha->setServiceRequest($service);
        $servicePorcha->setKhatianLog(null);

        $khatianLog = $this->getAppliedKhatianLogId($servicePorcha);
        if ($khatianLog) {
            $servicePorcha->setKhatianLog($khatianLog);
            $this->_em->persist($khatianLog);
        }

        $service->setDetailEntities(array($servicePorcha));

        $this->setDeliveryDate($service, $officeSetting);

        $this->_em->persist($servicePorcha);
        $this->_em->flush();
    }

    public function createCorrectionService($data)
    {
        $service = $this->setServiceRequestForCorrection($data);
        $this->setServiceRequestForPorchaCorrection($data, $service);
        return $service;
    }

    protected function setServiceRequestForCorrection($data)
    {
        $office = $this->getEntityManager()->getRepository('AppBundle:Office')->findOneByDistrict($data['district']);

        $service = new ServiceRequest();
        $service->setName($data['name']);
        $service->setNid($data['nid']);
        $service->setEmail($data['email']);
        $service->setContactNumber($data['mobile']);
        $service->setOffice($office);
        $service->setStatus('PENDING');
        $service->setUrgency('NORMAL');
        $service->setDeliveryMethod('DIRECT');
        $service->setCreatedAt(new \DateTime());
        $service->setType('PORCHA_CORRECTION_REQUEST');
        $service->setRequestFrom('WEB');
        $this->savePorcha($service);
        return $service;
    }

    protected function setServiceRequestForPorchaCorrection($data,$service)
    {
        $survey = $this->getEntityManager()->getRepository('PorchaProcessingBundle:Survey')->find($data['survey']);
        $district = $this->getEntityManager()->getRepository('PorchaProcessingBundle:District')->find($data['district']);
        $upozila = $this->getEntityManager()->getRepository('PorchaProcessingBundle:Upozila')->find($data['upozila']);
        $mouza = $this->getEntityManager()->getRepository('PorchaProcessingBundle:Mouza')->find($data['mouza']);
        $servicePorcha = new ServiceRequestPorcha();
        $servicePorcha->setSurvey($survey);
        $servicePorcha->setDistrict($district);
        $servicePorcha->setUpozila($upozila);
        $servicePorcha->setMouza($mouza);
        $servicePorcha->setKhatianNo($data['khatianNo']);
        $servicePorcha->setCorrectionReason($data['correction_reason']);
        $servicePorcha->setCorrectionInfo($data['correction_info']);
        $servicePorcha->setServiceRequest($service);
        $servicePorcha->setKhatianLog($this->getAppliedKhatianLogId($servicePorcha));

        $this->_em->persist($servicePorcha);
        $this->_em->flush();
    }

    public function getPorchAppliedList($user)
    {
        $query = $this->createQueryBuilder('srp');
        $query->join('srp.serviceRequest', 'sr');
        $query->where('sr.contactNumber = :contactNumber');
        $query->andWhere('sr.type = :type');
        $query->setParameter('contactNumber', $user);
        $query->setParameter('type', 'PORCHA_REQUEST');
        return $query->getQuery()->getResult();
    }
    public function getMouzaAppliedList($user)
    {
        $query= $this->createQueryBuilder('srp');
        $query->join('srp.serviceRequest','sr');
        $query->where('sr.contactNumber = :contactNumber');
        $query->andWhere('sr.type = :type');
        $query->setParameter('contactNumber', $user);
        $query->setParameter('type', 'MOUZA_MAP');
        return $query->getQuery()->getResult();
    }


    public function getTotalKhatianDeliveredForUpozila($upozila)
    {

        $qb = $this->createQueryBuilder('p');
        $qb->join('p.serviceRequest', 's');
        $qb->select('count(s.id) AS total');
        $qb->where('p.upozila = :upozila');
        $qb->andWhere('s.status = :status');
        $qb->andWhere('s.type = :type');
        $qb->setParameter('upozila', $upozila);
        $qb->setParameter('status', 'DELIVERED');
        $qb->setParameter('type', 'PORCHA_REQUEST');
        $qb->setMaxResults(1);
        return $qb->getQuery()->getResult();

    }

    public function getTotalOthersAppDeliveredForUpozila($upozila)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.serviceRequest', 's');
        $qb->select('count(s.id) AS total');
        $qb->where('p.upozila = :upozila');
        $qb->andWhere('s.status = :status');
        $qb->andWhere('s.type != :type');
        $qb->setParameter('upozila', $upozila);
        $qb->setParameter('status', 'DELIVERED');
        $qb->setParameter('type', 'PORCHA_REQUEST');
        $qb->setMaxResults(1);
        return $qb->getQuery()->getResult();

    }
    public function findKhatianIdByApplicationId($applicationId){

        $qb = $this->createQueryBuilder('p');
        $qb->join('p.serviceRequest', 's');
        $qb->select('p');
        $qb->where('s.id = :applicationId');
        $qb->setParameter('applicationId', $applicationId);
        return $qb->getQuery()->getResult();

    }

    public function getTotalKhatianReceivedForUpozila($upozila)
    {

        $qb = $this->createQueryBuilder('p');
        $qb->join('p.serviceRequest', 's');
        $qb->select('count(s.id) AS total');
        $qb->where('p.upozila = :upozila');
        $qb->andWhere('s.status != :status');
        $qb->andWhere('s.type = :type');
        $qb->setParameter('upozila', $upozila);
        $qb->setParameter('status', 'DELIVERED');
        $qb->setParameter('type', 'PORCHA_REQUEST');
        $qb->setMaxResults(1);
        return $qb->getQuery()->getResult();
    }

    public function getTotalOthersAppReceivedForUpozila($upozila)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.serviceRequest', 's');
        $qb->select('count(s.id) AS total');
        $qb->where('p.upozila = :upozila');
        $qb->andWhere('s.status != :status');
        $qb->andWhere('s.type != :type');
        $qb->setParameter('upozila', $upozila);
        $qb->setParameter('status', 'DELIVERED');
        $qb->setParameter('type', 'PORCHA_REQUEST');
        $qb->setMaxResults(1);
        return $qb->getQuery()->getResult();
    }

    public function getTotalKhatianDeliveredForMouza($mouza)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.serviceRequest', 's');
        $qb->select('count(s.id) AS total');
        $qb->where('p.mouza = :mouza');
        $qb->andWhere('s.status = :status');
        $qb->andWhere('s.type = :type');
        $qb->setParameter('mouza', $mouza);
        $qb->setParameter('status', 'DELIVERED');
        $qb->setParameter('type', 'PORCHA_REQUEST');
        $qb->setMaxResults(1);
        return $qb->getQuery()->getResult();

    }

    public function getTotalOthersAppDeliveredForMouza($mouza)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.serviceRequest', 's');
        $qb->select('count(s.id) AS total');
        $qb->where('p.mouza = :mouza');
        $qb->andWhere('s.status = :status');
        $qb->andWhere('s.type != :type');
        $qb->setParameter('mouza', $mouza);
        $qb->setParameter('status', 'DELIVERED');
        $qb->setParameter('type', 'PORCHA_REQUEST');
        $qb->setMaxResults(1);

        return $qb->getQuery()->getResult();

    }

    public function getTotalKhatianReceivedForMouza($mouza)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.serviceRequest', 's');
        $qb->select('count(s.id) AS total');
        $qb->where('p.mouza = :mouza');
        $qb->andWhere('s.status != :status');
        $qb->andWhere('s.type = :type');
        $qb->setParameter('mouza', $mouza);
        $qb->setParameter('status', 'DELIVERED');
        $qb->setParameter('type', 'PORCHA_REQUEST');
        $qb->setMaxResults(1);

        return $qb->getQuery()->getResult();
    }

    public function getTotalOthersAppReceivedForMouza($mouza)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.serviceRequest', 's');
        $qb->select('count(s.id) AS total');
        $qb->where('p.mouza = :mouza');
        $qb->andWhere('s.status != :status');
        $qb->andWhere('s.type != :type');
        $qb->setParameter('mouza', $mouza);
        $qb->setParameter('status', 'DELIVERED');
        $qb->setParameter('type', 'PORCHA_REQUEST');
        $qb->setMaxResults(1);

        return $qb->getQuery()->getResult();
    }

    public function createServiceForMouza($data)
    {
        $service = $this->setMouzaServiceRequest($data);
        $officeSetting = $this->_em->getRepository('PorchaProcessingBundle:ServiceRequest')->getServiceFee($service->getOffice(), $service, $service->getType());
        $this->setServiceRequestForMouza($data,$service,$officeSetting);
        return $service;
    }

    public function setMouzaServiceRequest($data)
    {
        $district = $this->getEntityManager()->getRepository('AppBundle:District')->find($data['citizenDistrict']);
        $upozila = $this->getEntityManager()->getRepository('AppBundle:Upozila')->find($data['citizenUpozila']);
        $office = $this->getEntityManager()->getRepository('AppBundle:Office')->findOneByDistrict($data['district']);

        $service = new ServiceRequest();
        $service->setName($data['name']);
        $service->setNid($data['nid']);
        $service->setEmail($data['email']);
        $service->setContactNumber($data['mobile']);
        $service->setOffice($office);
        $service->setStatus('PENDING');
        $service->setCreatedAt(new \DateTime());
        $service->setType('MOUZA_MAP');
        $service->setUrgency($data['deliveryUrgency']);
        $service->setDeliveryMethod($data['deliveryWay']);
        $service->setRequestFrom('WEB');
        $service->setDistrict($district);
        $service->setUpozila($upozila);
        $service->setPostalCode($data['postalCode']);
        $service->setRoadNo($data['roadNo']);
        $service->setHouseNo($data['houseNo']);
        $service->setArea($data['area']);
        $service->setCourtFee($data['court-fee']);
        $service->setDeliveryFee($data['delivery-fee']);
        $service->setTotalFee($data['court-fee']+$data['delivery-fee']);

        $this->saveMouza($service);

        return $service;
    }

    public function saveMouza($serviceRequest)
    {
        $this->_em->persist($serviceRequest);
        $this->_em->flush();
    }

    public function setServiceRequestForMouza($data,ServiceRequest $service,$officeSetting = array())
    {
        $survey = $this->getEntityManager()->getRepository('PorchaProcessingBundle:Survey')->find($data['survey']);
        $district = $this->getEntityManager()->getRepository('PorchaProcessingBundle:District')->find($data['district']);
        $upozila = $this->getEntityManager()->getRepository('PorchaProcessingBundle:Upozila')->find($data['upozila']);
        $mouza = $this->getEntityManager()->getRepository('PorchaProcessingBundle:Mouza')->find($data['mouza']);

        $servicePorcha = new ServiceRequestPorcha();
        $servicePorcha->setSurvey($survey);
        $servicePorcha->setDistrict($district);
        $servicePorcha->setUpozila($upozila);
        $servicePorcha->setMouza($mouza);
        $servicePorcha->setSheetNo($data['sheetNo']);
        $servicePorcha->setDagNo($data['dagNo']);
        $servicePorcha->setServiceRequest($service);

        $service->setDetailEntities(array($servicePorcha));

        $this->setDeliveryDate($service, $officeSetting);

        $this->_em->persist($servicePorcha);
        $this->_em->flush();

    }
}
