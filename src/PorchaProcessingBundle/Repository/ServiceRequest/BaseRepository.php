<?php

namespace PorchaProcessingBundle\Repository\ServiceRequest;

use AppBundle\Entity\Office;
use Doctrine\ORM\EntityRepository;
use PorchaProcessingBundle\Entity\ServiceRequest;
use PorchaProcessingBundle\Entity\ServiceRequestAdditionalFee;
use PorchaProcessingBundle\Entity\ServiceRequestPorcha;

/**
 * ServiceRequestAdditionalFeeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseRepository extends EntityRepository
{

    public function persistAdditionalFees(ServiceRequest $serviceRequest, $additionalFees)
    {
        $total = 0;
        if (empty($additionalFees)) {
            return $total;
        }

        $this->removeOldRecord($serviceRequest);

        // if PORCHA and MOUZA
        /** @var ServiceRequestPorcha $porcha */
        $surveyId = count($serviceRequest->getDetailEntities()) ? $serviceRequest->getDetailEntities()[0]->getSurvey()->getId() : null;
        $fees = in_array($serviceRequest->getType(), array('PORCHA_REQUEST', 'PORCHA', 'MOUZA_MAP')) ? $additionalFees[$surveyId] : $additionalFees;
        
        /** @var ServiceRequestAdditionalFee $fee */
        foreach ($fees as $fee) {
            $fee->setServiceRequest($serviceRequest);
            $this->_em->persist($fee);
            $total += $fee->getAmount();
        }
        
        return $total;
    }

    protected function removeOldRecord($serviceRequest)
    {
        $fees = $this->_em->getRepository('PorchaProcessingBundle:ServiceRequestAdditionalFee')->findBy(array('serviceRequest' => $serviceRequest));
        foreach ($fees as $fee) {
            $this->_em->remove($fee);
        }
        $this->_em->flush();
    }

    public function getServiceFee(Office $office, ServiceRequest $serviceRequest, $requestType = null)
    {
        $em = $this->_em;

        $data = array(
            'deliveryDay' => $em->getRepository('AppBundle:DeliveryDaySettings')->getDeliveryDay($office, $requestType),
            'courtFee' => $em->getRepository('AppBundle:CourtFee')->getCourtFee($office, $requestType),
            'deliveryFee' => $em->getRepository('AppBundle:OfficeSettings')->getDeliveryFee($office),
        );

        // If new request, get value from settings, otherwise get value from ServiceRequestAdditionalFee
        if (!isset($serviceRequest->disableFields) || !$serviceRequest->disableFields['applicationInfo']) {
            $data['additionalFee'] = $em->getRepository('AppBundle:AdditionalFee')->getAdditionalFee($office, $requestType, $office->getType());
        } else {
            $entity = $serviceRequest->getDetailEntities()[0];
            $data['additionalFee'][$entity->getSurvey()->getId()] = $em->getRepository('PorchaProcessingBundle:ServiceRequestAdditionalFee')->findBy(array('serviceRequest' => $serviceRequest));
        }

        return $data;
    }

    public function getSingleServiceFee(Office $office, ServiceRequest $serviceRequest, $requestType = null)
    {
        $em = $this->_em;

        $data = array(
            'deliveryDay' => $em->getRepository('AppBundle:DeliveryDaySettings')->getSingleDeliveryDay($office, $requestType),
            'courtFee' => $em->getRepository('AppBundle:CourtFee')->getSingleCourtFee($office, $requestType),
            'deliveryFee' => $em->getRepository('AppBundle:OfficeSettings')->getDeliveryFee($office)
        );

        // If new request, get value from settings, otherwise get value from ServiceRequestAdditionalFee
        if (!isset($serviceRequest->disableFields) || !$serviceRequest->disableFields['applicationInfo']) {
            $data['additionalFee'] = $em->getRepository('AppBundle:AdditionalFee')->getSingleAdditionalFee($office, $requestType, $office->getType());
        } else {
            $data['additionalFee'] = $em->getRepository('PorchaProcessingBundle:ServiceRequestAdditionalFee')->findBy(array('serviceRequest' => $serviceRequest));
        }

        return $data;
    }
}
