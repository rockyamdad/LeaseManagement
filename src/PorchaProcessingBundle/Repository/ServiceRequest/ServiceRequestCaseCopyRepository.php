<?php

namespace PorchaProcessingBundle\Repository\ServiceRequest;

use AppBundle\Service\OfficeManager;
use AppBundle\Traits\QueryAssistant;
use Doctrine\DBAL\Types\Type;
use Doctrine\ORM\EntityRepository;
use PorchaProcessingBundle\Entity\Khatian;
use PorchaProcessingBundle\Entity\KhatianLog;
use PorchaProcessingBundle\Entity\ServiceRequest;
use PorchaProcessingBundle\Entity\ServiceRequestCaseCopy;
use PorchaProcessingBundle\Entity\ServiceRequestPorcha;
use Symfony\Component\HttpFoundation\Session\SessionInterface;

/**
 * ServiceRequestPorchaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRequestCaseCopyRepository extends ServiceRequestRepository
{
    public function createCaseCopy(ServiceRequestCaseCopy $serviceRequestCaseCopy, $fee = array(), $type)
    {
        $serviceRequestCaseCopy->getServiceRequest()->setCreatedAt(new \DateTime());
        $serviceRequestCaseCopy->getServiceRequest()->setStatus('PENDING');
        $this->saveCaseCopy($serviceRequestCaseCopy, $fee, $type);
    }

    public function saveCaseCopy(ServiceRequestCaseCopy $serviceRequestCaseCopy, $officeSetting = array(), $serviceType)
    {
        $serviceRequest = $serviceRequestCaseCopy->getServiceRequest();
        $serviceRequest->setType($serviceType);
        $this->setFees($serviceRequest, $officeSetting);
        if (!isset($serviceRequestCaseCopy->disableFields) || !$serviceRequestCaseCopy->disableFields['paymentInfo']) {
            $this->setDeliveryDate($serviceRequest, $officeSetting);
        }

        $this->_em->persist($serviceRequest);
        $this->_em->persist($serviceRequestCaseCopy);
        $this->_em->flush();
    }

    public function updateCaseCopy(ServiceRequestCaseCopy $serviceRequestCaseCopy, $fee = array(), $serviceType)
    {
        $this->saveCaseCopy($serviceRequestCaseCopy, $fee, $serviceType);
    }

    public function getList($data, $serviceType)
    {
        $params = $this->queryParameters($data);

        $qb = $this->createQueryBuilder('cp');
        $qb->join('cp.serviceRequest', 'sr');
        $qb->select('cp, sr');
        $qb->leftJoin('sr.office', 'o');
        $qb->andWhere('sr.type = :serviceType')->setParameter('serviceType', strtoupper($serviceType));
        $qb->orderBy('sr.createdAt', 'DESC');

        if (!empty($params['orderField'])) {
            $qb->orderBy($params['orderField'], $params['order']);
        }

        if (!empty($params['arrFilterField']['sr.createdAt'])) {
            $timestamp = strtotime($params['arrFilterField']['sr.createdAt']);

            $qb->andWhere('DAY(sr.createdAt) = :dd')->setParameter('dd', date('d', $timestamp));
            $qb->andWhere('MONTH(sr.createdAt) = :mm')->setParameter('mm', date('m', $timestamp));
            $qb->andWhere('YEAR(sr.createdAt) = :yy')->setParameter('yy', date('Y', $timestamp));

            unset($params['arrFilterField']['sr.createdAt']);
        }
        $qb = $this->filterQuery($qb, $params['arrFilterField']);

        return $qb->getQuery();
    }
    public function createService($data)
    {
        $service = $this->setServiceRequest($data);
        $this->setServiceRequestForCaseCopy($data,$service);
        return $service;
    }


    protected function setServiceRequest($data)
    {
        $district = $this->getEntityManager()->getRepository('AppBundle:District')->find($data['citizenDistrict']);
        $upozila = $this->getEntityManager()->getRepository('AppBundle:Upozila')->find($data['citizenUpozila']);
        $office = $this->getEntityManager()->getRepository('AppBundle:Office')->findOneByDistrict($data['district']);

        $service = new ServiceRequest();
        $service->setName($data['name']);
        $service->setNid($data['nid']);
        $service->setEmail($data['email']);
        $service->setContactNumber($data['mobile']);
        $service->setOffice($office);
        $service->setStatus('PENDING');
        $service->setCreatedAt(new \DateTime());
        $service->setType('CASE_COPY');
        $service->setDescription($data['details']);
        $service->setUrgency($data['deliveryUrgency']);
        $service->setDeliveryMethod($data['deliveryWay']);
        $service->setRequestFrom('WEB');
        $service->setDistrict($district);
        $service->setUpozila($upozila);
        $service->setPostalCode($data['postalCode']);
        $service->setRoadNo($data['roadNo']);
        $service->setHouseNo($data['houseNo']);
        $service->setArea($data['area']);

        $officeSetting = $this->_em->getRepository('PorchaProcessingBundle:ServiceRequest')->getSingleServiceFee($service->getOffice(), $service, $service->getType());
        $this->_em->getRepository('PorchaProcessingBundle:ServiceRequest')->setFees($service, $officeSetting);
        $this->setDeliveryDate($service, $officeSetting);
        $this->save($service, $officeSetting);

        return $service;
    }

    public function save($serviceRequest, $officeSettings = array())
    {
        $this->_em->persist($serviceRequest);
        $this->_em->flush();
    }

    /**
     * @param $data
     */
    protected function setServiceRequestForCaseCopy($data, $service)
    {
        $serviceCaseCopy = new ServiceRequestCaseCopy();
        $serviceCaseCopy->setCaseNo($data['caseNo']);
        $serviceCaseCopy->setCourtName($data['courtName']);
        $serviceCaseCopy->setLawyerName($data['lawyerName']);
        $serviceCaseCopy->setPlaintiffDefendant($data['plaintiffDefendant']);
        $serviceCaseCopy->setServiceRequest($service);
        $officeSetting = $this->_em->getRepository('PorchaProcessingBundle:ServiceRequest')->getSingleServiceFee($service->getOffice(), $service, $service->getType());

        $this->saveCaseCopy($serviceCaseCopy, $officeSetting, $service->getType());
    }

    public function getCaseCopyAppliedList($user)
    {
        $query= $this->createQueryBuilder('srcc');
        $query->join('srcc.serviceRequest','sr');
        $query->where('sr.contactNumber = :contactNumber');
        $query->andWhere('sr.type = :type');
        $query->setParameter('contactNumber', $user);
        $query->setParameter('type', 'CASE_COPY');
        return $query->getQuery()->getResult();
    }
}
