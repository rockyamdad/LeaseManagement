<?php

namespace AppBundle\Repository;

use AppBundle\Entity\AdditionalFee;
use AppBundle\Entity\Office;
use Doctrine\ORM\EntityRepository;
use PorchaProcessingBundle\Entity\ServiceRequestAdditionalFee;

/**
 * AdditionalFeeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdditionalFeeRepository extends EntityRepository
{

    public function getAdditionalFee(Office $office, $type, $requestFrom)
    {
        $output = array();
        $requestFrom = $requestFrom == 'DC' ? 'DIRECT' : $requestFrom;

        if($office->getType() == 'UDC'){
            $parentOffice = $office->getParent();
        } else {
            $parentOffice = $this->_em->getRepository('AppBundle:Office')->findOneBy(array('type' => 'MINISTRY'));
        }

        // Court Fee From Parent Office
        $fees = $this->findBy(array('office' => $parentOffice, 'applicationType' => $type, 'active' => true));
        if ($fees) {
            /** @var AdditionalFee $fee */
            foreach ($fees as $fee) {
                $output[$fee->getSurvey()->getId()] = $this->prepareValue($fee, $requestFrom);
            }
        }

        // Court Fee From Own Office
        $fees = $this->findBy(array('office' => $office, 'applicationType' => $type, 'active' => true));
        if ($fees) {
            /** @var AdditionalFee $courtFee */
            foreach ($fees as $fee) {
                $output[$fee->getSurvey()->getId()] = $this->prepareValue($fee, $requestFrom);
            }
        }

        return array_filter($output);
    }

    protected function prepareValue(AdditionalFee $fee, $requestFrom)
    {
        $output = array();
        if ($fee->getFeeTypeKey1() && $fee->getFeeTypeValue1() && $fee->getFeeApplicable1() && in_array($requestFrom, $fee->getFeeApplicable1())) {
            $output[] = $this->prepareFeeValue($fee->getFeeTypeKey1(), (int)$fee->getFeeTypeValue1(), $fee->getFeeApplicable1());
        }

        if ($fee->getFeeTypeKey2() && $fee->getFeeTypeValue2() && $fee->getFeeApplicable2() && in_array($requestFrom, $fee->getFeeApplicable2())) {
            $output[] = $this->prepareFeeValue($fee->getFeeTypeKey2(), (int)$fee->getFeeTypeValue2(), $fee->getFeeApplicable2());
        }

        if ($fee->getFeeTypeKey3() && $fee->getFeeTypeValue3() && $fee->getFeeApplicable3() && in_array($requestFrom, $fee->getFeeApplicable3())) {
            $output[] = $this->prepareFeeValue($fee->getFeeTypeKey3(), (int)$fee->getFeeTypeValue3(), $fee->getFeeApplicable3());
        }

        return $output;
    }

    protected function prepareFeeValue($name, $amount, $applicableTo = array())
    {
        $obj = new ServiceRequestAdditionalFee();
        $obj->setName($name);
        $obj->setAmount($amount);

        return $obj;
    }
    
    public function getSingleAdditionalFee(Office $office, $type, $requestFrom)
    {
        $output = array();
        $requestFrom = $requestFrom == 'DC' ? 'DIRECT' : $requestFrom;

        if($office->getType() == 'UDC'){
            $parentOffice = $office->getParent();
        } else {
            $parentOffice = $this->_em->getRepository('AppBundle:Office')->findOneBy(array('type' => 'MINISTRY'));
        }

        // Court Fee From Parent Office
        /** @var AdditionalFee $fee */
        $fee = $this->findOneBy(array('office' => $parentOffice, 'applicationType' => $type, 'active' => true));
        if ($fee) {
            $output = $this->prepareValue($fee, $requestFrom);
        }

        // Court Fee From Own Office
        $fee = $this->findOneBy(array('office' => $office, 'applicationType' => $type, 'active' => true));
        if ($fee) {
            $output = $this->prepareValue($fee, $requestFrom);
        }

        return array_filter($output);
    }
}
