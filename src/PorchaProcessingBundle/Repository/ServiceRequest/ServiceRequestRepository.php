<?php

namespace PorchaProcessingBundle\Repository\ServiceRequest;

use AppBundle\Entity\Office;
use AppBundle\Service\OfficeManager;
use AppBundle\Traits\QueryAssistant;
use Doctrine\ORM\EntityRepository;
use JMS\DiExtraBundle\Annotation\Service;
use PorchaProcessingBundle\Entity\ServiceRequest;
use PorchaProcessingBundle\Entity\ServiceRequestPorcha;
use UserBundle\Entity\User;

/**
 * ServiceRequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRequestRepository extends BaseRepository
{
    use QueryAssistant;

    protected $officeManager;


    public function getServiceRequestList($data, $serviceType, $delivered = false, $offices = null)
    {

        $serviceType = strtoupper($serviceType);

        switch ($serviceType) {
            case 'PORCHA_REQUEST':
                return $this->_em->getRepository('PorchaProcessingBundle:ServiceRequestPorcha')
                    ->getPorchaRequestList($data, $serviceType, $delivered);
            case 'INFORMATION_SLIP':
                return $this->_em->getRepository('PorchaProcessingBundle:ServiceRequestPorcha')
                    ->getPorchaRequestList($data, $serviceType, $delivered);
            case 'MOUZA_MAP':
                return $this->_em->getRepository('PorchaProcessingBundle:ServiceRequestPorcha')
                    ->getPorchaRequestList($data, $serviceType, $delivered);
            case 'PORCHA_CORRECTION_REQUEST':
                return $this->_em->getRepository('PorchaProcessingBundle:ServiceRequestPorcha')
                    ->getPorchaCorrectionRequestList($data, $serviceType, $delivered, $offices);

        }

        return array();
    }

    public function getServiceRequestReportList($data)
    {
        $serviceType = strtoupper($data['application_type']);

        switch ($serviceType) {
            case 'PORCHA_REQUEST':
                return $this->_em->getRepository('PorchaProcessingBundle:ServiceRequestPorcha')
                    ->getPorchaRequestReportList($data);
            case 'INFORMATION_SLIP':
                return $this->_em->getRepository('PorchaProcessingBundle:ServiceRequestPorcha')
                    ->getPorchaRequestList($data, $serviceType);
            case 'MOUZA_MAP':
                return $this->_em->getRepository('PorchaProcessingBundle:ServiceRequestPorcha')
                    ->getPorchaRequestList($data, $serviceType);

        }

        return array();
    }

    public function getServiceRequestFilterByApplicationId($appId, $serviceType, $user)
    {

        $serviceType = strtoupper($serviceType);

        switch ($serviceType) {
            case 'PORCHA_REQUEST':
                return $this->getServicePorchaRequestList($appId, $serviceType, $user);
            case 'INFORMATION_SLIP':
                return $this->getServicePorchaRequestList($appId, $serviceType, $user);
            case 'MOUZA_MAP':
                return $this->getServicePorchaRequestList($appId, $serviceType, $user);
            case 'CASE_COPY':
                return $this->getServicePorchaRequestList($appId, $serviceType, $user);

        }

        return array();
    }

    public function getServicePorchaRequestList($appId, $serviceType, User $user)
    {
        $serviceType = strtoupper($serviceType);

        $qb = $this->createQueryBuilder('sr');
        $qb->where('sr.office =:office');
        $qb->setParameter('office', $user->getOffice());
        $qb->andWhere('sr.type = :serviceType')->setParameter('serviceType', $serviceType);
        $qb->andWhere('sr.id = :id')->setParameter('id', $appId);

        return $qb->getQuery()->getResult();
    }

    public function getPorchaRequestAddressListPrint($data, $serviceType, $offices)
    {
        $params = $this->queryParameters($data);
        if (strtoupper($serviceType) == 'PORCHA_REQUEST' || strtoupper($serviceType) == 'MOUZA_MAP') {
            $qb = $this->_em->getRepository('PorchaProcessingBundle:ServiceRequestPorcha')
                ->createQueryBuilder('p');
            $qb->leftJoin('p.serviceRequest', 'sr');
        } else {

            $qb = $this->createQueryBuilder('sr');
        }

        $qb->where('sr.status =:status')->setParameter('status', 'READY_FOR_DELIVERY');
        $qb->andWhere('sr.type = :serviceType')->setParameter('serviceType', strtoupper($serviceType));
        $qb->andWhere('sr.office IN(:offices)')->setParameter('offices', $offices);
        $qb->orderBy('sr.id', 'ASC');

        if (!empty($params['orderField'])) {
            $qb->orderBy($params['orderField'], $params['order']);
        }

        if (!empty($params['arrFilterField']['sr.createdAt'])) {
            $timestamp = strtotime($params['arrFilterField']['sr.createdAt']);

            $qb->andWhere('DAY(sr.createdAt) = :dd')->setParameter('dd', date('d', $timestamp));
            $qb->andWhere('MONTH(sr.createdAt) = :mm')->setParameter('mm', date('m', $timestamp));
            $qb->andWhere('YEAR(sr.createdAt) = :yy')->setParameter('yy', date('Y', $timestamp));
            unset($params['arrFilterField']['sr.createdAt']);
        }
        $qb = $this->filterQuery($qb, $params['arrFilterField']);

        return $qb->getQuery()->getResult();
    }

    public function getList($data, $serviceType)
    {
        $params = $this->queryParameters($data);

        $qb = $this->createQueryBuilder('sr');
        $qb->leftJoin('sr.office', 'o');
        $qb->andWhere('sr.type = :serviceType')->setParameter('serviceType', strtoupper($serviceType));
        $qb->orderBy('sr.createdAt', 'DESC');

        if (!empty($params['orderField'])) {
            $qb->orderBy($params['orderField'], $params['order']);
        }

        if (!empty($params['arrFilterField']['sr.createdAt'])) {
            $timestamp = strtotime($params['arrFilterField']['sr.createdAt']);

            $qb->andWhere('DAY(sr.createdAt) = :dd')->setParameter('dd', date('d', $timestamp));
            $qb->andWhere('MONTH(sr.createdAt) = :mm')->setParameter('mm', date('m', $timestamp));
            $qb->andWhere('YEAR(sr.createdAt) = :yy')->setParameter('yy', date('Y', $timestamp));

            unset($params['arrFilterField']['sr.createdAt']);
        }
        $qb = $this->filterQuery($qb, $params['arrFilterField']);

        return $qb->getQuery();
    }

    public function getServiceRequestStatistics($data, $serviceType)
    {
        $serviceType = strtoupper($serviceType);
        $qb = $this->createQueryBuilder('sr');
        $qb->select('sr.requestFrom, count(sr.id) AS count_row');
        $qb->where('sr.type = :serviceType')->setParameter('serviceType', $serviceType);
        if (isset($data['ff']['o.id'])) {
            if (!is_array($data['ff']['o.id'])) {
                $data['ff']['o.id'] = array($data['ff']['o.id']);
            }
            $qb->andWhere($qb->expr()->in('sr.office', $data['ff']['o.id']));
        }
        $qb->groupBy('sr.requestFrom');

        if (isset($data['ff']['sr.status'])) {
            $qb->andWhere('sr.status = :status')->setParameter('status', $data['ff']['sr.status']);
        }
        $total = $qb->getQuery()->getResult();

        $timestamp = !empty($data['ff']['sr.createdAt']) ? strtotime($data['ff']['sr.createdAt']) : time();
        $qb->andWhere('DAY(sr.createdAt) = :dd')->setParameter('dd', date('d', $timestamp));
        $qb->andWhere('MONTH(sr.createdAt) = :mm')->setParameter('mm', date('m', $timestamp));
        $qb->andWhere('YEAR(sr.createdAt) = :yy')->setParameter('yy', date('Y', $timestamp));
        $today = $qb->getQuery()->getResult();

        return $this->prepareStatisticsData($today, $total);
    }

    public function prepareStatisticsData($todayData, $totalData)
    {
        $serviceType = array('DIRECT', 'WEB', 'UDC');
        $todayOutPut = array_fill_keys($serviceType, '0');
        $totalOutPut = array_fill_keys($serviceType, '0');
        foreach ($todayData as $row) {
            $todayOutPut[$row['requestFrom']] = $row['count_row'];
        }
        foreach ($totalData as $row) {
            $totalOutPut[$row['requestFrom']] = $row['count_row'];
        }

        return array(
            'total' => $totalOutPut,
            'today' => $todayOutPut,
        );
    }

    public function create(ServiceRequest $serviceRequest, $officeSetting)
    {
        $serviceRequest->setCreatedAt(new \DateTime());
        $serviceRequest->setStatus('PENDING');
        $this->setApplicationFrom($serviceRequest);

        $this->save($serviceRequest, $officeSetting);
    }

    protected function setApplicationFrom(ServiceRequest $serviceRequest)
    {
        $officeType = $serviceRequest->getOffice()->getType();
        if ($officeType == 'UDC') {
            $serviceRequest->setRequestFrom('UDC');
        } else {
            $serviceRequest->setRequestFrom('DIRECT');
        }
    }

    public function save($serviceRequest, $officeSetting = array())
    {
        if (!isset($serviceRequest->disableFields) || !$serviceRequest->disableFields['paymentInfo']) {
            $this->setDeliveryDate($serviceRequest, $officeSetting);
            $this->setFees($serviceRequest, $officeSetting);
        }

        $this->_em->persist($serviceRequest);
        $this->_em->flush();
    }

    protected function setDeliveryDate(ServiceRequest $serviceRequest, $officeSetting)
    {
        $additionalDeliveryDayForUdc = $officeSetting['deliveryFee']['udcDeliveryDay'];

        $deliveryDay = $serviceRequest->getUrgency(
        ) == 'URGENT' ? (int) $officeSetting['deliveryDay']['urgentDelivery'] : (int) $officeSetting['deliveryDay']['normalDelivery'];

        if (strtoupper($serviceRequest->getOffice()->getType())=='UDC'){
            $deliveryDay = $deliveryDay + $additionalDeliveryDayForUdc;
        }

        $date = $this->getOfficeManager()->applicationDeliveryDate(
            $serviceRequest->getCreatedAt()->format('Y-m-d'),
            $deliveryDay
        );
        $serviceRequest->setEstimateDeliveryAt(
            new \DateTime($date)
        );
    }

    /**
     * @return OfficeManager
     */
    public function getOfficeManager()
    {
        return $this->officeManager;
    }

    /**
     * @param OfficeManager $officeManager
     * @return $this
     */
    public function setOfficeManager(OfficeManager $officeManager)
    {
        $this->officeManager = $officeManager;

        return $this;
    }

    protected function setFees(ServiceRequest $serviceRequest, $officeSetting)
    {
        $fee = $serviceRequest->getUrgency() == 'URGENT' ? (int) $officeSetting['courtFee']['urgentCourtFee'] : (int) $officeSetting['courtFee']['normalCourtFee'];
        $serviceRequest->setCourtFee($fee);

        if ($serviceRequest->getDeliveryMethod() == 'POSTAL') {
            $deliveryFee = $officeSetting['deliveryFee']['deliveryFee'];
            if ($serviceRequest->getDistrict()->getId() != $serviceRequest->getOffice()->getDistrict()->getId()) {
                $deliveryFee = $officeSetting['deliveryFee']['otherDistrictDeliveryFee'];
            }
            $serviceRequest->setDeliveryFee((int) $deliveryFee);
        }

        if ($serviceRequest->getRequestFrom() == 'UDC') {
            $serviceRequest->setUdcFee((int) $officeSetting['deliveryFee']['udcApplicationReceiveFee']);
        }

        $additionalFee = $this->persistAdditionalFees($serviceRequest, $officeSetting['additionalFee']);

        // Total
        $serviceRequest->setTotalFee(
            $serviceRequest->getCourtFee() + $serviceRequest->getDeliveryFee() + $additionalFee
        );

    }

    public function createService($data)
    {
        $service = $this->setServiceRequest($data);

        return $service;
    }

    /**
     * @param $data
     * @return ServiceRequest
     */
    protected function setServiceRequest($data)
    {
        $district = $this->getEntityManager()->getRepository('AppBundle:District')->find($data['citizenDistrict']);
        $upozila = $this->getEntityManager()->getRepository('AppBundle:Upozila')->find($data['citizenUpozila']);
        $office = $this->getEntityManager()->getRepository('AppBundle:Office')->findOneByDistrict($data['district']);

        $service = new ServiceRequest();
        $service->setName($data['name']);
        $service->setNid($data['nid']);
        $service->setEmail($data['email']);
        $service->setContactNumber($data['mobile']);
        $service->setOffice($office);
        $service->setStatus('PENDING');
        $service->setCreatedAt(new \DateTime());
        $service->setType('INFORMATION_SLIP');
        $service->setDescription($data['details']);
        $service->setUrgency($data['deliveryUrgency']);
        $service->setDeliveryMethod($data['deliveryWay']);
        $service->setRequestFrom('WEB');
        $service->setDistrict($district);
        $service->setUpozila($upozila);
        $service->setPostalCode($data['postalCode']);
        $service->setRoadNo($data['roadNo']);
        $service->setHouseNo($data['houseNo']);
        $service->setArea($data['area']);

        $officeSetting = $this->_em->getRepository('PorchaProcessingBundle:ServiceRequest')->getSingleServiceFee(
            $service->getOffice(),
            $service,
            $service->getType()
        );
        $this->_em->getRepository('PorchaProcessingBundle:ServiceRequest')->setFees($service, $officeSetting);

        $this->setDeliveryDate($service, $officeSetting);

        $this->_em->persist($service);
        $this->_em->flush();

        return $service;
    }

    public function getTotalApplicationDelivered()
    {
        $qb = $this->createQueryBuilder('s');
        $qb->select('count(s.id) AS max_total');
        $qb->where('s.status = :status');
        $qb->setParameter('status', 'DELIVERED');

        return $qb->getQuery()->getResult();
    }

    public function getTotalUDCServiceDelivered($district)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->join('s.office', 'o');
        $qb->join('o.district', 'd');
        $qb->select('count(s.id) AS total');
        $qb->where('s.requestFrom = :requestFrom');
        $qb->andWhere('o.district = :district');
        $qb->andWhere('s.status = :status');
        $qb->setParameter('requestFrom', 'UDC');
        $qb->setParameter('district', $district);
        $qb->setParameter('status', 'DELIVERED');
        $qb->setMaxResults(1);

        return $qb->getQuery()->getResult();
    }

    public function getTotalServiceDelivered($district)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->join('s.office', 'o');
        $qb->join('o.district', 'd');
        $qb->select('count(s.id) AS total');
        $qb->where('o.district = :district');
        $qb->andWhere('s.status = :status');
        $qb->setParameter('district', $district);
        $qb->setParameter('status', 'DELIVERED');
        $qb->setMaxResults(1);

        return $qb->getQuery()->getResult();
    }

    public function getTotalKhatianDelivered($district)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->join('s.office', 'o');
        $qb->join('o.district', 'd');
        $qb->select('count(s.id) AS total');
        $qb->where('o.district = :district');
        $qb->andWhere('s.status = :status');
        $qb->andWhere('s.type = :type');
        $qb->setParameter('district', $district);
        $qb->setParameter('status', 'DELIVERED');
        $qb->setParameter('type', 'PORCHA_REQUEST');
        $qb->setMaxResults(1);

        return $qb->getQuery()->getResult();
    }

    public function getTotalOthersAppDelivered($district)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->join('s.office', 'o');
        $qb->join('o.district', 'd');
        $qb->select('count(s.id) AS total');
        $qb->where('o.district = :district');
        $qb->andWhere('s.status = :status');
        $qb->andWhere('s.type != :type');
        $qb->setParameter('district', $district);
        $qb->setParameter('status', 'DELIVERED');
        $qb->setParameter('type', 'PORCHA_REQUEST');
        $qb->setMaxResults(1);

        return $qb->getQuery()->getResult();
    }

    public function getTotalKhatianReceived($district)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->join('s.office', 'o');
        $qb->join('o.district', 'd');
        $qb->select('count(s.id) AS total');
        $qb->where('o.district = :district');
        $qb->andWhere('s.status != :status');
        $qb->andWhere('s.type = :type');
        $qb->setParameter('district', $district);
        $qb->setParameter('status', 'DELIVERED');
        $qb->setParameter('type', 'PORCHA_REQUEST');
        $qb->setMaxResults(1);

        return $qb->getQuery()->getResult();
    }

    public function getTotalOthersAppReceived($district)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->join('s.office', 'o');
        $qb->join('o.district', 'd');
        $qb->select('count(s.id) AS total');
        $qb->where('o.district = :district');
        $qb->andWhere('s.status != :status');
        $qb->andWhere('s.type != :type');
        $qb->setParameter('district', $district);
        $qb->setParameter('status', 'DELIVERED');
        $qb->setParameter('type', 'PORCHA_REQUEST');
        $qb->setMaxResults(1);

        return $qb->getQuery()->getResult();
    }

    public function getServiceRequestStatisticsByStatus($udcOffices)
    {

        $qb = $this->createQueryBuilder('sr');
        $qb->select('sr.status,sr.type, COUNT(sr.id) AS total');
        $qb->leftJoin('sr.office', 'o');
        $qb->where("o.id IN(:offices)")->setParameter("offices", $udcOffices);
        $qb->groupBy('sr.type', 'sr.status');
        $data = array(
            'PORCHA_REQUEST'   => array(),
            'MOUZA_MAP'        => array(),
            'CASE_COPY'        => array(),
            'INFORMATION_SLIP' => array(),
        );

        foreach ($qb->getQuery()->getResult() as $row) {
            $data[$row['type']][$row['status']] = (int) $row['total'];
        }

        return $data;
    }

    public function getServiceRequestStatisticsByApplication($udcOffices)
    {
        $qb = $this->createQueryBuilder('sr');
        $qb->select('sr.type, COUNT(sr.id) AS total');
        $qb->leftJoin('sr.office', 'o');
        $qb->where("o.id IN(:offices)")->setParameter("offices", $udcOffices);
        $qb->groupBy('sr.type');

        $data = array(
            'PORCHA_REQUEST'   => 0,
            'MOUZA_MAP'        => 0,
            'CASE_COPY'        => 0,
            'INFORMATION_SLIP' => 0,
        );

        foreach ($qb->getQuery()->getResult() as $key => $row) {

            $data[$row['type']] = (int) $row['total'];
        }

        return $data;
    }


}
