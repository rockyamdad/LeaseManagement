<?php

namespace AppBundle\Repository;

use AppBundle\Entity\DeliveryDaySettings;
use AppBundle\Entity\Office;
use Doctrine\ORM\EntityRepository;

/**
 * DeliveryDayRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DeliveryDayRepository extends EntityRepository
{
    public function getDeliveryDay(Office $office, $type)
    {
        $output = array();

        $ministryOffice = $this->_em->getRepository('AppBundle:Office')->findOneBy(array('type' => 'MINISTRY'));
        $deliveryDays = $this->findBy(array('office' => $ministryOffice, 'applicationType' => $type, 'active' => true));
        if ($deliveryDays) {
            /** @var DeliveryDaySettings $deliveryDay */
            foreach ($deliveryDays as $deliveryDay) {
                if (!$deliveryDay->getSurvey()) continue;
                $output[$deliveryDay->getSurvey()->getId()] = array(
                    'normalDeliveryHasEntry' => $deliveryDay->getNormalDeliveryHasEntry(),
                    'normalDeliveryNotEntry' => $deliveryDay->getNormalDeliveryNotEntry(),
                    'normalNonDeliverable' => $deliveryDay->getNormalDeliveryNonDeliverable(),
                    'urgentDeliveryHasEntry' => $deliveryDay->getEmergencyDeliveryHasEntry(),
                    'urgentDeliveryNotEntry' => $deliveryDay->getEmergencyDeliveryNotEntry(),
                    'urgentDeliveryNonDeliverable' => $deliveryDay->getEmergencyDeliveryNonDeliverable(),
                );
            }
        }

        $deliveryDays = $this->findBy(array('office' => $office, 'applicationType' => $type, 'active' => true));
        if ($deliveryDays) {
            /** @var DeliveryDaySettings $deliveryDay */
            foreach ($deliveryDays as $deliveryDay) {
                if (!$deliveryDay->getSurvey()) continue;
                $output[$deliveryDay->getSurvey()->getId()] = array(
                    'normalDeliveryHasEntry' => $deliveryDay->getNormalDeliveryHasEntry(),
                    'normalDeliveryNotEntry' => $deliveryDay->getNormalDeliveryNotEntry(),
                    'normalNonDeliverable' => $deliveryDay->getNormalDeliveryNonDeliverable(),
                    'urgentDeliveryHasEntry' => $deliveryDay->getEmergencyDeliveryHasEntry(),
                    'urgentDeliveryNotEntry' => $deliveryDay->getEmergencyDeliveryNotEntry(),
                    'urgentDeliveryNonDeliverable' => $deliveryDay->getEmergencyDeliveryNonDeliverable(),
                );
            }
        }

        return $output;
    }

    public function getSingleDeliveryDay(Office $office, $type)
    {
        $output = array();

        $ministryOffice = $this->_em->getRepository('AppBundle:Office')->findOneBy(array('type' => 'MINISTRY'));
        $deliveryDays = $this->findBy(array('office' => $ministryOffice, 'applicationType' => $type, 'active' => true));
        if ($deliveryDays) {
            /** @var DeliveryDaySettings $deliveryDay */
            foreach ($deliveryDays as $deliveryDay) {
                $output['normalDelivery'] = $deliveryDay->getNormalDeliveryHasEntry();
                $output['urgentDelivery'] = $deliveryDay->getEmergencyDeliveryHasEntry();
            }
        }

        $deliveryDays = $this->findBy(array('office' => $office, 'applicationType' => $type, 'active' => true));
        if ($deliveryDays) {
            /** @var DeliveryDaySettings $deliveryDay */
            foreach ($deliveryDays as $deliveryDay) {
                $output['normalDelivery'] = $deliveryDay->getNormalDeliveryHasEntry();
                $output['urgentDelivery'] = $deliveryDay->getEmergencyDeliveryHasEntry();
            }
        }

        return $output;
    }
}
