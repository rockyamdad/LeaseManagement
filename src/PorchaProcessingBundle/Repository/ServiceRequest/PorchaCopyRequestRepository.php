<?php

namespace PorchaProcessingBundle\Repository\ServiceRequest;

use AppBundle\Entity\Office;
use AppBundle\Service\OfficeManager;
use AppBundle\Traits\QueryAssistant;
use Doctrine\ORM\EntityRepository;
use JMS\DiExtraBundle\Annotation\Service;
use PorchaProcessingBundle\Entity\ServiceRequest;
use PorchaProcessingBundle\Entity\ServiceRequestPorcha;
use UserBundle\Entity\User;

/**
 * PorchaCopyRequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PorchaCopyRequestRepository extends BaseRepository
{
    use QueryAssistant;

    protected $officeManager;
    
    public function create(ServiceRequest $serviceRequest, $officeSetting)
    {
        $serviceRequest->setCreatedAt(new \DateTime());
        $serviceRequest->setStatus('PENDING');
        $this->save($serviceRequest, $officeSetting);
    }
    
    public function save($serviceRequest, $officeSetting = array())
    {
        $this->_em->persist($serviceRequest);
        $this->_em->flush();
    }
    
    public function getAllPorchaCopyRequest($data,$offices){
        
        $params = $this->queryParameters($data);

        $qb = $this->createQueryBuilder('pcr');
        $qb->join('pcr.office', 'o');

        $qb->andWhere('pcr.office IN(:offices)')->setParameter('offices', $offices);
        $qb->orderBy('pcr.createdAt', 'DESC');

        if (!empty($params['orderField'])) {
            $qb->orderBy($params['orderField'], $params['order']);
        }

        if (!empty($params['arrFilterField']['pcr.createdAt'])) {
            $timestamp = strtotime($params['arrFilterField']['pcr.createdAt']);

            $qb->andWhere('DAY(pcr.createdAt) = :dd')->setParameter('dd', date('d', $timestamp));
            $qb->andWhere('MONTH(pcr.createdAt) = :mm')->setParameter('mm', date('m', $timestamp));
            $qb->andWhere('YEAR(pcr.createdAt) = :yy')->setParameter('yy', date('Y', $timestamp));

            unset($params['arrFilterField']['pcr.createdAt']);
        }
        $qb = $this->filterQuery($qb, $params['arrFilterField']);

        return $qb->getQuery();
    }
    
    public function getAllPorchaCopyResponse($data,$offices){
        
        $params = $this->queryParameters($data);

        $qb = $this->createQueryBuilder('pcr');
        $qb->join('pcr.office', 'o');

        $qb->andWhere('pcr.toOffice IN(:offices)')->setParameter('offices', $offices);
        $qb->orderBy('pcr.createdAt', 'DESC');

        if (!empty($params['orderField'])) {
            $qb->orderBy($params['orderField'], $params['order']);
        }

        if (!empty($params['arrFilterField']['pcr.createdAt'])) {
            $timestamp = strtotime($params['arrFilterField']['pcr.createdAt']);

            $qb->andWhere('DAY(pcr.createdAt) = :dd')->setParameter('dd', date('d', $timestamp));
            $qb->andWhere('MONTH(pcr.createdAt) = :mm')->setParameter('mm', date('m', $timestamp));
            $qb->andWhere('YEAR(pcr.createdAt) = :yy')->setParameter('yy', date('Y', $timestamp));
            unset($params['arrFilterField']['pcr.createdAt']);
        }
        $qb = $this->filterQuery($qb, $params['arrFilterField']);

        return $qb->getQuery();
    }


}
